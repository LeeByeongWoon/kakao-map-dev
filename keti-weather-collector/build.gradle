buildscript {
	ext {
		springBootVersion = "2.4.8"
	}

	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '2.4.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.keti.weather'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
mainClassName= 'com.keti.weather.collector.KetiWeatherCollector'

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.6'
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '2.7.1'
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.2'
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.3'
	implementation group: 'org.javassist', name: 'javassist', version: '3.27.0-GA'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit'
	}
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.2'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'
}


//gradle build
//gradle bootRun -Dspring.profiles.active=local -Dspring.target-ids="1,2,3" -Dspring.scheduled-cron="0 * * * * *" -Dspring.leap-time-collector="false"
bootRun {
    String activeProfile = System.properties['active']
	String targetIds = System.properties['target-ids']
	String scrapInterval = System.properties['scrap-interval']
	String scheduledCron = "0 0 * * * *"
	String leapTimeCollector = System.properties['leap-time-collector']	// 개발용 옵션.. 상용에서 절대 사용하지 말것

	if(scrapInterval == "1") {
		scheduledCron = "0 0 * * * *"
	} else if(scrapInterval == "24") {
		scheduledCron = "0 0 0 * * *"
	} else {
		scheduledCron = "0 0 0/" + scrapInterval + " * * *"
	}

    systemProperty "spring.profiles.active", activeProfile
	systemProperty "spring.weatherApi.target-ids", targetIds
	systemProperty "spring.weatherApi.scrap-interval", scrapInterval
	systemProperty "spring.weatherApi.scheduled-cron", scheduledCron
	systemProperty "spring.weatherApi.leap-time-collector", leapTimeCollector
	
}

// test {
// 	useJUnitPlatform()
// }
